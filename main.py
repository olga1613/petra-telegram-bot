import os
import json
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler, filters
from openai import OpenAI
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials
import requests
import asyncio

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")

client = OpenAI(api_key=OPENAI_API_KEY)
user_state = {}

# --- Google Sheets ---
def connect_to_sheet():
    credentials_dict = json.loads(os.getenv("GOOGLE_CREDENTIALS_JSON"))
    scopes = ["https://www.googleapis.com/auth/spreadsheets"]
    credentials = Credentials.from_service_account_info(credentials_dict, scopes=scopes)
    gc = gspread.authorize(credentials)
    spreadsheet = gc.open_by_key("1nTUc2widvcKhF_s4E0B4i74NTkWPSca4MIoROphRGs0")
    worksheet = spreadsheet.sheet1
    return worksheet

def write_to_sheet(name, text):
    worksheet = connect_to_sheet()
    date = datetime.now().strftime("%Y-%m-%d %H:%M")
    worksheet.append_row([name, text, date])

def user_already_registered(name):
    worksheet = connect_to_sheet()
    users = worksheet.col_values(1)
    return name in users

# --- Bitrix ---
def send_to_bitrix(name, phone, email, comment):
    payload = {
        "fields": {
            "NAME": name,
            "PHONE": [{"VALUE": phone}],
            "EMAIL": [{"VALUE": email}],
            "COMMENTS": comment,
            "SOURCE_ID": "WEB"
        }
    }
    try:
        response = requests.post(BITRIX_WEBHOOK_URL, json=payload)
        print("‚úÖ Bitrix:", response.status_code)
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Bitrix error: {e}")
        return False

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ /start ---
async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_state[chat_id] = {"stage": "ask_name"}
    greeting = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ü–µ—Ç—Ä–∞, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–∞ –û–ª—å–≥–∏.\n"
        "–ó–¥–µ—Å—å –Ω–µ—Ç —Ç—É—Ä–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É ‚Äî —É –Ω–∞—Å –∂–∏–≤—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —É–º–Ω—ã—Ö –∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö.\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –ø–æ–º–æ–≥—É –ø–æ–Ω—è—Ç—å, –ø–æ–¥–æ–π–¥—ë—Ç –ª–∏ —Ç–µ–±–µ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç, —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ –∏ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –±—É–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üôÇ\n"
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª–∞, –∫–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
    )
    await update.message.reply_text(greeting)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user = update.message.from_user
    user_message = update.message.text

    if chat_id in user_state and user_state[chat_id].get("stage") == "ask_name":
        user_name = user_message
        user_state[chat_id]["name"] = user_name
        user_state[chat_id]["stage"] = "chat"
        await update.message.reply_text(
            f"–ö—Ä–∞—Å–∏–≤–æ. –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name} üôÇ\n"
            "–ß—Ç–æ —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—à–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ? –¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å."
        )
        return

    user_name = user.full_name or "Telegram User"

    try:
        write_to_sheet(user_name, user_message)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", e)

    try:
        if not user_already_registered(user_name):
            phone = "+79998887766"
            email = "telegram@user.com"
            send_to_bitrix(user_name, phone, email, user_message)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ Bitrix:", e)

    thread = client.beta.threads.create()
    client.beta.threads.messages.create(thread.id, role="user", content=user_message)
    run = client.beta.threads.runs.create(thread_id=thread.id, assistant_id=ASSISTANT_ID)

    while True:
        run_status = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
        if run_status.status == "completed":
            break
        await asyncio.sleep(1)

    messages = client.beta.threads.messages.list(thread_id=thread.id)
    reply = messages.data[0].content[0].text.value
    await update.message.reply_text(reply)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", handle_start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.run_polling() 
